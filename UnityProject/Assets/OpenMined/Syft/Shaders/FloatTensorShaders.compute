// 

struct Dimensions {
	int rows;
	int columns;
};

#pragma kernel Abs

RWStructuredBuffer<float> AbsData;
RWStructuredBuffer<float> AbsResult;
 
[numthreads(1,1,1)]
void Abs (uint3 id : SV_DispatchThreadID) {
	if(AbsData[id.x] < 0) {
		AbsResult[id.x] = -AbsData[id.x];
	} else {
		AbsResult[id.x] = AbsData[id.x];
	}
}

#pragma kernel Abs_

RWStructuredBuffer<float> AbsData_;
 
[numthreads(1,1,1)]
void Abs_ (uint3 id : SV_DispatchThreadID) {
	if(AbsData_[id.x] < 0) {
		AbsData_[id.x] = -AbsData_[id.x];
	}
}

#pragma kernel AddScalar_

RWStructuredBuffer<float> AddScalarData_;
RWStructuredBuffer<float> AddScalarScalar_;

[numthreads(4,1,1)]
void AddScalar_ (uint3 id: SV_DispatchThreadID) {
	AddScalarData_[id.x] = AddScalarData_[id.x] + AddScalarScalar_[0];
}

#pragma kernel AddElem_

RWStructuredBuffer<float> AddElemDataA_;
RWStructuredBuffer<float> AddElemDataB_;

[numthreads(4,1,1)]
void AddElem_ (uint3 id: SV_DispatchThreadID) {
	AddElemDataA_[id.x] = AddElemDataA_[id.x] + AddElemDataB_[id.x];
}

#pragma kernel AddScalar

RWStructuredBuffer<float> AddScalarData;
RWStructuredBuffer<float> AddScalarScalar;
RWStructuredBuffer<float> AddScalarResult;

[numthreads(4,1,1)]
void AddScalar (uint3 id: SV_DispatchThreadID) {
	AddScalarResult[id.x] = AddScalarData[id.x] + AddScalarScalar[0];
}

#pragma kernel AddElem

RWStructuredBuffer<float> AddElemDataA;
RWStructuredBuffer<float> AddElemDataB;
RWStructuredBuffer<float> AddElemDataResult;

[numthreads(4,1,1)]
void AddElem (uint3 id: SV_DispatchThreadID) {
	AddElemDataResult[id.x] = AddElemDataA[id.x] + AddElemDataB[id.x];
}

#pragma kernel AddMM_

RWStructuredBuffer<float> AddmmDataA_;
RWStructuredBuffer<float> AddmmDataB_;
RWStructuredBuffer<float> AddmmDataC_;
RWStructuredBuffer<Dimensions> AddmmDimensions_;

[numthreads(4,1,1)]
void AddMM_ (uint3 id : SV_DispatchThreadID) {
	// transpose
	int columns = AddmmDimensions_[0].rows;
	int rows = AddmmDimensions_[0].columns;

	float product = 0;

	int t = 0;
	for (int i = 0; i < columns; i++) {
		product += AddmmDataB_[id.x + t] * AddmmDataC_[i];
		t += rows;
	}

	AddmmDataA_[id.x] += product;
}

#pragma kernel Ceil

RWStructuredBuffer<float> CeilData;
RWStructuredBuffer<float> CeilResult;
[numthreads(4,1,1)]
void Ceil (uint3 id: SV_DispatchThreadID) {
		CeilResult[id.x] = ceil(CeilData[id.x]);
}

#pragma kernel Floor_

RWStructuredBuffer<float> FloorData_;

[numthreads(4,1,1)]
void Floor_ (uint3 id: SV_DispatchThreadID) {
		FloorData_[id.x] = floor(FloorData_[id.x]);
}

#pragma kernel MulScalar_

RWStructuredBuffer<float> MulScalarData_;
RWStructuredBuffer<float> MulScalarScalar_;

[numthreads(4,1,1)]
void MulScalar_ (uint3 id: SV_DispatchThreadID) {
	MulScalarData_[id.x] = MulScalarData_[id.x] * MulScalarScalar_[0];
}

#pragma kernel MulElem_

RWStructuredBuffer<float> MulElemDataA_;
RWStructuredBuffer<float> MulElemDataB_;

[numthreads(4,1,1)]
void MulElem_ (uint3 id: SV_DispatchThreadID) {
	MulElemDataA_[id.x] = MulElemDataA_[id.x] * MulElemDataB_[id.x];
}

#pragma kernel MulScalar

RWStructuredBuffer<float> MulScalarData;
RWStructuredBuffer<float> MulScalarScalar;
RWStructuredBuffer<float> MulScalarResult;

[numthreads(4,1,1)]
void MulScalar (uint3 id: SV_DispatchThreadID) {
	MulScalarResult[id.x] = MulScalarData[id.x] * MulScalarScalar[0];
}

#pragma kernel MulElem

RWStructuredBuffer<float> MulElemDataA;
RWStructuredBuffer<float> MulElemDataB;
RWStructuredBuffer<float> MulElemDataResult;

[numthreads(4,1,1)]
void MulElem (uint3 id: SV_DispatchThreadID) {
	MulElemDataResult[id.x] = MulElemDataA[id.x] * MulElemDataB[id.x];
}

#pragma kernel Negate

RWStructuredBuffer<float> NegateData;
RWStructuredBuffer<float> NegateResult;
[numthreads(4,1,1)]
void Negate (uint3 id: SV_DispatchThreadID) {
	NegateResult[id.x] = -NegateData[id.x];
}

#pragma kernel Pow

RWStructuredBuffer<float> PowScalarData;
RWStructuredBuffer<float> PowScalarScalar;
RWStructuredBuffer<float> PowScalarResult;

[numthreads(4,1,1)]
void Pow (uint3 id: SV_DispatchThreadID) {
	PowScalarResult[id.x] = pow(abs(PowScalarData[id.x]),PowScalarScalar[0]);
}

#pragma kernel Pow_

RWStructuredBuffer<float> PowScalarData_;
RWStructuredBuffer<float> PowScalarScalar_;

[numthreads(4,1,1)]
void Pow_ (uint3 id: SV_DispatchThreadID) {
	PowScalarData_[id.x] = pow(abs(PowScalarData_[id.x]),PowScalarScalar_[0]);
}


#pragma kernel Sigmoid_

RWStructuredBuffer<float> SigmoidData_;

[numthreads(1,1,1)]
void Sigmoid_ (uint3 id : SV_DispatchThreadID) {
	SigmoidData_[id.x] = 1 / (1 + exp(-SigmoidData_[id.x]));
}

#pragma kernel SubScalar_

RWStructuredBuffer<float> SubScalarData_;
RWStructuredBuffer<float> SubScalarScalar_;

[numthreads(4,1,1)]
void SubScalar_ (uint3 id: SV_DispatchThreadID) {
	SubScalarData_[id.x] = SubScalarData_[id.x] - SubScalarScalar_[0];
}

#pragma kernel SubElem_

RWStructuredBuffer<float> SubElemDataA_;
RWStructuredBuffer<float> SubElemDataB_;

[numthreads(4,1,1)]
void SubElem_ (uint3 id: SV_DispatchThreadID) {
	SubElemDataA_[id.x] = SubElemDataA_[id.x] - SubElemDataB_[id.x];
}

#pragma kernel SubScalar

RWStructuredBuffer<float> SubScalarData;
RWStructuredBuffer<float> SubScalarScalar;
RWStructuredBuffer<float> SubScalarResult;

[numthreads(4,1,1)]
void SubScalar (uint3 id: SV_DispatchThreadID) {
	SubScalarResult[id.x] = SubScalarData[id.x] - SubScalarScalar[0];
}

#pragma kernel SubElem

RWStructuredBuffer<float> SubElemDataA;
RWStructuredBuffer<float> SubElemDataB;
RWStructuredBuffer<float> SubElemDataResult;

[numthreads(4,1,1)]
void SubElem (uint3 id: SV_DispatchThreadID) {
	SubElemDataResult[id.x] = SubElemDataA[id.x] - SubElemDataB[id.x];
}

#pragma kernel Tanh

RWStructuredBuffer<float> TanhData;
RWStructuredBuffer<float> TanhResult;

[numthreads(4,1,1)]
void Tanh (uint3 id: SV_DispatchThreadID) {
	TanhResult[id.x] = tanh(TanhData[id.x]);
}

#pragma kernel Zero_

RWStructuredBuffer<float> ZeroData_;

[numthreads(4,1,1)]
void Zero_ (uint3 id: SV_DispatchThreadID) {
       ZeroData_[id.x] = 0;
}
